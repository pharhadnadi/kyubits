# Open the Lock
# Go to Discuss
# You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot.
#
#     The lock initially starts at '0000', a string representing the state of the 4 wheels.
#
#     You are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.
#
#     Given a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.
#
#     Example 1:
#     Input: deadends = ["0201","0101","0102","1212","2002"], target = "0202"
# Output: 6
# Explanation:
#     A sequence of valid moves would be "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202".
#         Note that a sequence like "0000" -> "0001" -> "0002" -> "0102" -> "0202" would be invalid,
#                                                                                           because the wheels of the lock become stuck after the display becomes the dead end "0102".
#     Example 2:
#     Input: deadends = ["8888"], target = "0009"
# Output: 1
# Explanation:
#     We can turn the last wheel in reverse to move from "0000" -> "0009".
#     Example 3:
#     Input: deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"
# Output: -1
# Explanation:
#     We can't reach the target without getting stuck.
# Example 4:
# Input: deadends = ["0000"], target = "8888"
# Output: -1
# Note:
# The length of deadends will be in the range [1, 500].
# target will not be in the list deadends.
# Every string in deadends and the string target will be a string of 4 digits from the 10,000 possibilities '0000' to '9999'.

# @param {String[]} deadends
# @param {String} target
# @return {Integer}
def open_lock(deadends, target)
  stop = {}
  deadends.each {|x| stop[x] = true}
  start = "0000"
  step = attempt(start, target, stop, 0, {})
  step || -1
end

def attempt try, target, stop, step, seen
  queue = [[try, step]]
  repeat = 0
  while !queue.empty? do
    try, step = queue.shift
    puts "try #{try} Q -#{queue.size}"
    seen[try] = true
    next if stop[try]
    # p try
    return step if target == try
    new_queue = []
    old_queue = []
    8.times do |n|
      new = move(try, n)
      # p new
      unless seen[new]
        seen[new] = true
        old_queue << [new, step+1]
        if new_queue.empty?
          new_queue << [new, step+1]
        else
          head_score = score(new_queue.first.first, target)
          tail_score = score(new_queue.last.first, target)
          new_score = score(new, target)
          if (head_score-new_score).abs > (tail_score-new_score).abs
            new_queue.unshift [new, step+1]
          else
            new_queue << [new, step+1]
          end
        end
      else
        repeat+=1
      end
    end
    next if new_queue.empty?
    puts "old_queue #{old_queue}"
    puts "new_queue #{new_queue}"

    # queue = queue + new_queue # 28k
    # queue+=new_queue # 28k
    queue+=old_queue # 31k
    puts "repeat #{repeat}"
  end
  nil
end

def score try, target
  try_ary = try.chars.map(&:to_i)
  targ_ary = target.chars.map(&:to_i)
  score = 0
  try_ary.each_with_index {|n, i|
    m = targ_ary[i]
    del = [(n-m).abs, (n-m+10).abs, (n-m-10).abs].min
    score+=del
  }
  score
end

def move str, config
  ary = str.chars.map(&:to_i)
  x = 4
  idx = config % x
  ary[idx] += (config >= x ? -1 : 1)
  ary[idx] = 9 if ary[idx] == -1
  ary[idx] = 0 if ary[idx] == 10
  ary.join
end

# good
# deadends = ["0201", "0101", "0102", "1212", "2002"]
# target = "0202"

# good after memoization
# deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"]
# target = "8888"

# timeout 1 :( 10 passing
# deadends =
#     ["6678", "8666", "7877", "8677", "6777", "6777", "6767", "7877", "8687", "8788", "6667", "6768", "7667", "7786", "7667", "6878", "7668", "7778", "6776", "6787", "6766", "8877", "7688", "7876", "8777", "8677", "7866", "8688", "7686", "8877", "7866", "7777", "7787", "7676", "8688", "7866", "8787", "7876", "6887", "8677", "8778", "7886", "8788", "6686", "7788", "7787", "8687", "8777", "7888", "7767", "8678", "8877", "7866", "8776", "8687", "8878", "8776", "7877", "7788", "8687", "8776", "6866", "7776", "8877", "6886", "6778", "7788", "8666", "6668", "7768", "8886", "8888", "8666", "8768", "8878", "7666", "8766", "7678", "8688", "6866", "7887", "7887", "8867", "8668", "7777", "6687", "8886", "8768", "8687", "8678", "8876", "8776", "8777", "6776", "6876", "8878", "8877", "7876", "6867", "8886", "6687", "8886", "6777", "7678", "8777", "8768", "8868", "8777", "7877", "6676", "6876", "7778", "7668", "6687", "6666", "8786", "6876", "7868", "8676", "7888", "8886", "8666", "6876", "7788", "8867", "6766", "8877", "6668", "8887", "7866", "8776", "6687", "7787", "7688", "8767", "6667", "8876", "8678", "6686", "7668", "6687", "8878", "7886", "7788", "6788", "7868", "7887", "8766", "7668", "8866", "7877", "7876", "6878", "6868", "8688", "6866", "6886", "8888", "6766", "6877", "8678", "7778", "8666", "8777", "6787", "8788", "6886", "6887", "7886", "6668", "7868", "6868", "6877", "6766", "8778", "7687", "7686", "7667", "7676", "7778", "6778", "6677", "8687", "7867", "7786", "6866", "6767", "6688", "7778", "6778", "6766", "7877", "6766", "8678", "7786", "8886", "7666", "8666", "7676", "8888", "7666", "7787", "8768", "7767", "7886", "7688", "6776", "7876", "7686", "7677", "7867", "6667", "7877", "7766", "7777", "8877", "7778", "7777", "7868", "6686", "6676", "7676", "7887", "8778", "8888", "7687", "6686", "8876", "7767", "7888", "8666", "7768", "6686", "7768", "7678", "8867", "7767", "6866", "8876", "7688", "8766", "7777", "7687", "8686", "8687", "6868", "7887", "8786", "6688", "6777", "6666", "8688", "6877", "7687", "7767", "7668", "8668", "6777", "8786", "8876", "6688", "8878", "6887", "8886", "7788", "8678", "7788", "6677", "6667", "6867", "6886", "7687", "7778", "7776", "7678", "6768", "7668", "6678", "6887", "6888", "8687", "8787", "8866", "7677", "8667", "6876", "8787", "6786", "6688", "7786", "6777", "8777", "6778", "6787", "7886", "8878", "8677", "6677", "7766", "7876", "8667", "7668", "7867", "6888", "7687", "8666", "6868", "6767", "7768", "8876", "8867", "6866", "6687", "8878", "6866", "8888", "7788", "6687", "6878", "8676", "8686", "7768", "6686", "6787", "8687", "7888", "6867", "7886", "8777", "6676", "7678", "6868", "8766", "7787", "8688", "7868", "6876", "8677", "6878", "6888", "6788", "6686", "7887", "6678", "6786", "7668", "7867", "8686", "7686", "8886", "6688", "7877", "7866", "8887", "7666", "8688", "8868", "7787", "6867", "8666", "7766", "6787", "6668", "8866", "8786", "7876", "6788", "7686", "6667", "8878", "7868", "6886", "6887", "6768", "7777", "6877", "8766", "6876", "8687", "8777", "7687", "8878", "7778", "7868", "6868", "8887", "8686", "7677", "7788", "7766", "6777", "7686", "7766", "8677", "6767", "8777", "8776", "6686", "6678", "6668", "8687", "8878", "6776", "7687", "7868", "8876", "6676", "8878", "7868", "6788", "7677", "6776", "7768", "6677", "6788", "6677", "6767", "6678", "7766", "6688", "7788", "6778", "8678", "7777", "7676", "6688", "6767", "7777", "8686", "8766", "8668", "6766", "7666", "8687", "8786", "6777", "6686", "7667", "8776", "7777", "7887", "6878", "8876", "7668", "6866", "6766", "6778", "8866", "7768", "6877", "8788", "8776", "7877", "8776", "6767", "8776", "8868", "6678", "6666", "7668", "8777", "6877", "6677", "8888", "6767", "6787", "7777", "8868", "6777", "7688", "6668", "6876", "6678", "8766", "8676", "6786", "8676", "6788", "6878", "8878", "7666", "8766", "8868", "6767", "8876", "8678", "6688", "7766", "7877", "6777", "7888", "6676", "7867", "8676", "7688", "8888", "6777", "8687", "6667", "6667"]
# target = "7878"

# timeout 2 .. score method.. 10 passing
# deadends =
# ["8430","5911","4486","7174","9772","0731","9550","3449","4437","3837","1870","5798","9583","9512","5686","5131","0736","3051","2141","2989","6368","2004","1012","8736","0363","3589","8568","6457","3467","1967","1055","6637","1951","0575","4603","2606","0710","4169","7009","6554","6128","2876","8151","4423","0727","8130","3571","4801","8968","6084","3156","3087","0594","9811","3902","4690","6468","2743","8560","9064","4231","6056","2551","8556","2541","5460","5657","1151","5123","3521","2200","9333","9685","4871","9138","5807","2191","2601","1792","3470","9096","0185","0367","6862","1757","6904","4485","7973","7201","2571","3829","0868","4632","6975","2026","3463","2341","4647","3680","3282","3761","4410","3397","3357","4038","6505","1655","3812","3558","4759","1112","8836","5348","9113","1627","3249","0537","4227","7952","8855","3592","2054","3175","6665","4088","9959","3809","7379","6949","8063","3686","8078","0925","5167","2075","4665","2628","8242","9831","1397","5547","9449","6512","6083","9682","2215","3236","2457","6211","5536","8674","2647","9752","5433","0186","5904","1526","5347","1387","3153","1353","6069","9995","9496","0003","3400","1692","6870","4445","3063","0708","3278","6961","3063","0249","0375","1763","1804","4695","6493","7573","9977","1108","0856","5631","4799","4164","0844","2600","1785","1587","4510","9012","7497","4923","2560","0338","3839","5624","1980","1514","4634","2855","7012","3626","7032","6145","5663","4395","0724","4711","1573","6904","8100","2649","3890","8110","8067","1460","0186","6098","2459","6991","9372","8539","8418","7944","0499","9276","1525","1281","8738","5054","7869","6599","8018","7530","2327","3681","5248","4291","7300","8854","2591","8744","3052","6369","3669","8501","8455","5726","1211","8793","6889","9315","0738","6805","5980","7485","2333","0140","4708","9558","9026","4349","5978","4989","5238","3217","5938","9660","5858","2118","7657","5896","3195","8997","1688","2863","9356","4208","5438","2642","4138","7466","6154","0926","2556","9574","4497","9633","0585","1390","5093","3047","0430","7482","0750","6229","8714","4765","0941","1780","6262","0925","5631","9167","0885","7713","5576","3775","9652","0733","7467","5301","9365","7978","4736","3309","6965","4703","5897","8460","9619","0572","6297","7701","7554","8669","5426","6474","5540","5038","3880","1657","7574","1108","4369","7782","9742","5301","6984","3158","2869","0599","2147","6962","9722","3597","9015","3115","9051","8269","6967","5392","4401","6579","8997","8933","9297","0151","8820","3297","6723","1755","1163","8896","7122","4859","5504","0857","4682","8177","8702","9167","9410","0130","2789","7492","5938","3012","4137","3414","2245","4292","6945","5446","6614","2977","8640","9242","7603","8349","9420","0538","4222","0599","8459","8738","4764","6717","7575","5965","9816","9975","4994","2612","0344","6450","9088","4898","6379","4127","1574","9044","0434","5928","6679","1753","8940","7563","0545","4575","6407","6213","8327","3978","9187","2996","1956","8819","9591","7802","4747","9094","0179","0806","2509","4026","4850","2495","3945","4994","5971","3401","0218","6584","7688","6138","7047","9456","0173","1406","1564","3055","8725","4835","4737","6279","5291","0145","0002","1263","9518","1251","8224","6779","4113","8680","2946","1685","2057","9520","4099","7785","1134","2152","4719","6038","1599","6750","9273","7755","3134","2345","8208","5750","5850","2019","0350","9013","6911","6095","6843","3157","9049","0801","2739","9691","3511"]
# target = "2248"

#  right results wrong timing
deadends =
["6687","6766","7776","6886","6768","8877","6878","7876","6866","6876","7687","7787","8878","7866","6677","6667","8887","7867","8678","6677","8866","8788","7688","7667","8786","8767","6788","8876","7868","8778","8687","6768","6876","7887","7767","7686","7887","6668","6686","6668","6766","6886","6777","6867","8887","7666","8676","7868","6767","8866","7686","7868","7866","7866","7778","6668","8676","8668","8868","7666","6788","7778","8667","7778","6678","6887","7867","6686","7678","8666","8886","8666","6878","7778","7786","8786","8666","8866","6687","8767","6766","6668","7786","7887","6686","8767","7766","7676","8668","8786","8866","6668","6666","6886","6788","8687","6866","6687","6768","6776","7776","8766","7887","6678","6878","8787","8687","6887","8788","8886","8887","7767","8888","8688","8767","8787","7867","7677","7686","6887","7778","8788","7778","6688","6668","7867","8876","6877","6886","8678","8787","7678","8888","8866","6877","6868","7688","7688","6888","8687","6668","6688","7887","6886","6766","8877","8877","7676","7778","8687","6677","6768","8678","6867","7787","7778","6676","7686","7778","8768","8668","7867","6886","8877","6887","8768","6768","6687","8867","7877","8778","7867","8688","6688","6767","7886","6888","8876","7677","7887","8876","8866","7668","8766","6887","8678","6776","8786","6886","8788","7867","7868","7666","7878","7878","6886","7667","6878","8887","7776","7776","8887","7878","8688","7787","8677","8878","8887","8768","8877","8678","8768","7688","6866","8787","7887","6877","6867","7887","7868","8776","6866","7767","6666","6868","8688","7666","7786","8776","8686","6678","6878","7768","6878","6687","7786","6668","7688","7887","6886","8788","6787","7766","6878","6687","8868","6868","7666","6788","8786","8676","8777","7766","8677","7667","6777","7777","8877","8878","8887","7878","6768","7666","7887","8687","8667","8878","8678","7688","6688","8778","7876","8778","8778","6677","6767","8868","6676","8687","7686","7767","6766","7888","6678","8787","8878","6768","7877","8868","6676","6666","6668","8868","7777","6888","7787","6887","8677","7768","7766","8887","6887","7668","8787","8888","6668","6777","7666","7666","6687","8686","6668","6676","8787","6666","8876","7876","7787","7688","6788","7887","8778","6866","8768","7788","8766","6678","6766","8788","8888","7878","8768","6887","8886","8876","7788","6777","8767","7788","6787","6668","6666","7688","8678","6878","8676","6768","7666","7867","7676","6687","8688","8768","6868","6666","8687","6768","8687","7877","6777","7878","8867","8867","7866","6677","7667","8676","7668","7768","7788","7687","7878","7766","7868","8766","6888","6886","7786","8678","8676","8668","7778","8878","7678","7687","8668","7767","7886","6667","7867","7776","6786","7778","7886","8787","6668","7786","8776","6867","6878","7867","8778","7767","7878","8876","7867","7686","8776","6768","8788","8666","8867","8687","7788","6878","7886","8688","8866","8686","6788","8886","6676","8778","8676","6787","6777","7688","6668","6877","6686","7876","7778","8667","7887","6787","8778","6777","6676","7688","6678","7668","7768","7688","7778","8867","6787","6867","7767","7767","7688","8778","6767","8877","6678","6886","6877","6686","7667","6786","8666","6786","7687","7666","8767","6786","7888","6886","8678","7886","7767","8777","7676","7686","6867","6668","6677","6766","8788","7868","6876","6686","8787","6877","8876","8776","6878","8676","7667","6776","6886","7766","7676","6886","8687","6887","8687","8777","6687","8866","8886"]
target = "6778"

p open_lock(deadends, target)
